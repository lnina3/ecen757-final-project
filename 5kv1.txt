Malicious attacks and software errors are increasingly
common. The growing reliance of industry and gov-
ernment on online information services makes malicious
attacks more attractive and makes the consequences of
successful attacks more serious. In addition, the number
of software errors is increasing due to the growth in size
and complexity of software. Since malicious attacks and
software errors can cause faulty nodes to exhibit Byzan-
tine (i.e., arbitrary) behavior, Byzantine-fault-tolerant al-
gorithms are increasingly important.
This paper presents a new, practical algorithm for
state machine replication [17, 34] that tolerates Byzantine
faults. The algorithm offers both liveness and safety
provided at most 1
3 out of a total of replicas are
simultaneously faulty. This means that clients eventually
receive replies to their requests and those replies are
correct according to linearizability [14, 4]. The algorithm
works in asynchronous systems like the Internet and it
incorporates important optimizations that enable it to
perform efficiently.
There is a significant body of work on agreement
This research was supported in part by DARPA under contract DABT63-
95-C-005, monitored by Army Fort Huachuca, and under contract
F30602-98-1-0237, monitored by the Air Force Research Laboratory,
and in part by NEC. Miguel Castro was partially supported by a PRAXIS
XXI fellowship.
and replication techniques that tolerate Byzantine faults
(starting with [19]). However, most earlier work (e.g.,
[3, 24, 10]) either concerns techniques designed to
demonstrate theoretical feasibility that are too inefficient
to be used in practice, or assumes synchrony, i.e.,
relies on known bounds on message delays and process
speeds. The systems closest to ours, Rampart [30] and
SecureRing [16], were designed to be practical, but they
rely on the synchrony assumption for correctness, which
is dangerous in the presence of malicious attacks. An
attacker may compromise the safety of a service by
delaying non-faulty nodes or the communication between
them until they are tagged as faulty and excluded from the
replica group. Such a denial-of-service attack is generally
easier than gaining control over a non-faulty node.
Our algorithm is not vulnerable to this type of
attack because it does not rely on synchrony for
safety. In addition, it improves the performance of
Rampart and SecureRing by more than an order of
magnitude as explained in Section 7. It uses only one
message round trip to execute read-only operations and
two to execute read-write operations. Also, it uses
an efficient authentication scheme based on message
authentication codes during normal operation; public-key
cryptography, which was cited as the major latency [29]
and throughput [22] bottleneck in Rampart, is used only
when there are faults.
To evaluate our approach, we implemented a replica-
tion library and used it to implement a real service: a
Byzantine-fault-tolerant distributed file system that sup-
ports the NFS protocol. We used the Andrew bench-
mark [15] to evaluate the performance of our system. The
results show that our system is only 3% slower than the
standard NFS daemon in the Digital Unix kernel during
normal-case operation.
Thus, the paper makes the following contributions:
It describes the first state-machine replication proto-
col that correctly survives Byzantine faults in asyn-
chronous networks.
It describes a number of important optimizations that
allow the algorithm to perform well so that it can be
used in real systems.
1
It describes the implementation of a Byzantine-fault-
tolerant distributed file system.
It provides experimental results that quantify the cost
of the replication technique.
The remainder of the paper is organized as follows.
We begin by describing our system model, including our
failure assumptions. Section 3 describes the problem
solved by the algorithm and states correctness conditions.
The algorithm is described in Section 4 and some
important optimizations are described in Section 5.
Section 6 describes our replication library and how
we used it to implement a Byzantine-fault-tolerant
NFS. Section 7 presents the results of our experiments.
Section 8 discusses related work. We conclude with a
summary of what we have accomplished and a discussion
of future research directions.

Source: Miguel Castro and Barbara Liskov, "Practical Byzantine Fault Tolerance"
